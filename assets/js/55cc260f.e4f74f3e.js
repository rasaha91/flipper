"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7718],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>d,mdx:()=>y,useMDXComponents:()=>c,withMDXComponents:()=>p});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),p=function(e){return function(t){var n=c(t.components);return r.createElement(e,i({},t,{components:n}))}},c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=o,m=p["".concat(a,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(m,u(u({ref:t},s),{},{components:n})):r.createElement(m,u({ref:t},s))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,a[1]=u;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5760:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var r=n(83117),o=n(80102),i=(n(67294),n(3905)),a=n(44996),u=["components"],l={id:"index",title:"Features"},s=void 0,p={unversionedId:"features/index",id:"features/index",title:"Features",description:"Flipper itself only provides the architectural platform. What makes it useful are the plugins built on top of it: Logs, Layout Inspector and Network Inspector are all plugins. Plugins can be built very specific to your business logic and the use-cases you have in your app. Flipper is shipped with a couple of built-in all-purpose plugins, but you're encouraged to build your own. Each plugin needs to be enabled individually.",source:"@site/../docs/features/index.mdx",sourceDirName:"features",slug:"/features/",permalink:"/docs/features/",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/features/index.mdx",tags:[],version:"current",frontMatter:{id:"index",title:"Features"},sidebar:"main",next:{title:"Share Flipper Data",permalink:"/docs/features/share-flipper-data"}},c={},d=[{value:"Build your own plugin",id:"build-your-own-plugin",level:2}],f={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,u);return(0,i.mdx)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"Flipper itself only provides the architectural platform. What makes it useful are the plugins built on top of it: ",(0,i.mdx)("a",{parentName:"p",href:"/docs/features/plugins/device-logs"},"Logs"),", ",(0,i.mdx)("a",{parentName:"p",href:"/docs/features/plugins/inspector"},"Layout Inspector")," and ",(0,i.mdx)("a",{parentName:"p",href:"/docs/features/plugins/network"},"Network Inspector")," are all plugins. Plugins can be built very specific to your business logic and the use-cases you have in your app. Flipper is shipped with a couple of built-in all-purpose plugins, but you're encouraged to ",(0,i.mdx)("a",{parentName:"p",href:"#build-your-own-plugin"},"build your own"),". Each plugin needs to be enabled individually."),(0,i.mdx)("img",{alt:"Plugins",src:(0,a.default)("img/plugins.png")}),(0,i.mdx)("h2",{id:"build-your-own-plugin"},"Build your own plugin"),(0,i.mdx)("p",null,"The Flipper desktop app and the mobile native SDK establish a connection which is used to send data to and from the device. Flipper does not make any restrictions on what kind of data is being sent. This enables a lot of different use-cases where you want to better understand what is going inside your app. For example you can visualize the state of local caches, events happening or trigger actions on your app from the desktop."),(0,i.mdx)("p",null,"If there is no plugin that does exactly what you want, then you can build your own plugin tailored to your needs. A plugin always consists of the native implementation sending and receiving data and the desktop plugin visualizing data. To learn more and build your own plugin, see the ",(0,i.mdx)("a",{parentName:"p",href:"/docs/tutorial/intro"},"extend Flipper")," page. The native implementations are written in Java, Objective-C, or C++, the desktop UI is written in React."))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4257],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>g,useMDXComponents:()=>u,withMDXComponents:()=>d});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=r.createContext({}),d=function(e){return function(n){var t=u(n.components);return r.createElement(e,a({},n,{components:t}))}},u=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(t),c=i,f=d["".concat(l,".").concat(c)]||d[c]||m[c]||a;return t?r.createElement(f,o(o({ref:n},p),{},{components:t})):r.createElement(f,o({ref:n},p))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<a;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var r=t(67294),i=t(86010);const a="tabItem_Ymn6";function l(e){var n=e.children,t=e.hidden,l=e.className;return r.createElement("div",{role:"tabpanel",className:(0,i.default)(a,l),hidden:t},n)}},65488:(e,n,t)=>{t.r(n),t.d(n,{default:()=>m});var r=t(83117),i=t(67294),a=t(86010),l=t(72389),o=t(67392),s=t(7094),p=t(12466);const d="tabList__CuJ",u="tabItem_LNqP";function c(e){var n,t,l=e.lazy,c=e.block,m=e.defaultValue,f=e.values,g=e.groupId,h=e.className,v=i.Children.map(e.children,(function(e){if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),x=null!=f?f:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),y=(0,o.l)(x,(function(e,n){return e.value===n.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var b=null===m?m:null!=(n=null!=m?m:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:v[0].props.value;if(null!==b&&!x.some((function(e){return e.value===b})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+b+'" but none of its children has the corresponding value. Available values are: '+x.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var T=(0,s.U)(),k=T.tabGroupChoices,w=T.setTabGroupChoices,N=(0,i.useState)(b),F=N[0],O=N[1],C=[],j=(0,p.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var M=k[g];null!=M&&M!==F&&x.some((function(e){return e.value===M}))&&O(M)}var E=function(e){var n=e.currentTarget,t=C.indexOf(n),r=x[t].value;r!==F&&(j(n),O(r),null!=g&&w(g,String(r)))},P=function(e){var n,t=null;switch(e.key){case"ArrowRight":var r,i=C.indexOf(e.currentTarget)+1;t=null!=(r=C[i])?r:C[0];break;case"ArrowLeft":var a,l=C.indexOf(e.currentTarget)-1;t=null!=(a=C[l])?a:C[C.length-1]}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,a.default)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.default)("tabs",{"tabs--block":c},h)},x.map((function(e){var n=e.value,t=e.label,l=e.attributes;return i.createElement("li",(0,r.Z)({role:"tab",tabIndex:F===n?0:-1,"aria-selected":F===n,key:n,ref:function(e){return C.push(e)},onKeyDown:P,onFocus:E,onClick:E},l,{className:(0,a.default)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":F===n})}),null!=t?t:n)}))),l?(0,i.cloneElement)(v.filter((function(e){return e.props.value===F}))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map((function(e,n){return(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==F})}))))}function m(e){var n=(0,l.default)();return i.createElement(c,(0,r.Z)({key:String(n)},e))}},60370:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>b,frontMatter:()=>p,metadata:()=>u,toc:()=>m});var r=t(83117),i=t(80102),a=(t(67294),t(3905)),l=t(65488),o=t(85162),s=["components"],p={id:"testing",title:"Testing"},d=void 0,u={unversionedId:"extending/testing",id:"extending/testing",title:"Testing",description:"Developer tools are only used if they work. Testing is important as it discovers defects/bugs and improves the quality, reliability and functionality of software.",source:"@site/../docs/extending/testing.mdx",sourceDirName:"extending",slug:"/extending/testing",permalink:"/docs/extending/testing",draft:!1,editUrl:"https://github.com/facebook/flipper/blob/main/website/../docs/extending/testing.mdx",tags:[],version:"current",frontMatter:{id:"testing",title:"Testing"},sidebar:"main",previous:{title:"Plugin structure",permalink:"/docs/extending/desktop-plugin-structure"},next:{title:"Debugging",permalink:"/docs/extending/debugging"}},c={},m=[{value:"Writing tests",id:"writing-tests",level:2},{value:"Desktop plugins",id:"desktop-plugins",level:3},{value:"Client plugins",id:"client-plugins",level:2},{value:"Running (Flipper) tests",id:"running-flipper-tests",level:2},{value:"Flipper Desktop",id:"flipper-desktop",level:3},{value:"Flipper SDK",id:"flipper-sdk",level:3},{value:"Android (Java)",id:"android-java",level:4},{value:"Gradle",id:"gradle",level:5},{value:"Gradle",id:"gradle-1",level:5},{value:"Buck",id:"buck",level:5},{value:"iOS",id:"ios",level:3},{value:"React Native",id:"react-native",level:3}],f=function(e){return function(n){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,a.mdx)("div",n)}},g=f("OssOnly"),h=f("FbAndroidTesting"),v=f("FbIosTesting"),x=f("FbInternalOnly"),y={toc:m};function b(e){var n=e.components,t=(0,i.Z)(e,s);return(0,a.mdx)("wrapper",(0,r.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Developer tools are only used if they work. Testing is important as it discovers defects/bugs and improves the quality, reliability and functionality of software.\nThis page details the Flipper APIs that can be used to effectively test plugins."),(0,a.mdx)("h2",{id:"writing-tests"},"Writing tests"),(0,a.mdx)("p",null,"This section covers ",(0,a.mdx)("a",{parentName:"p",href:"#desktop-plugins"},"desktop plugins")," and ",(0,a.mdx)("a",{parentName:"p",href:"#client-plugins"},"client plugins"),"."),(0,a.mdx)("h3",{id:"desktop-plugins"},"Desktop plugins"),(0,a.mdx)("p",null,"Flipper uses ",(0,a.mdx)("a",{parentName:"p",href:"https://jestjs.io/"},"Jest")," as a unit testing framework."),(0,a.mdx)("p",null,"Writing unit tests for Flipper Desktop plugins is covered in detail in the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/tutorial/js-custom#testing-plugin-logic"},"Building a Desktop Plugin")," tutorial."),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"flipper-plugin")," package provide several ",(0,a.mdx)("a",{parentName:"p",href:"/docs/extending/flipper-plugin#testutils"},"test utilities")," to make testing more convenient."),(0,a.mdx)("h2",{id:"client-plugins"},"Client plugins"),(0,a.mdx)(l.default,{defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"}],mdxType:"Tabs"},(0,a.mdx)(o.default,{value:"android",mdxType:"TabItem"},(0,a.mdx)(g,{mdxType:"OssOnly"},(0,a.mdx)("p",null,"Start by creating your first test file in this directory ",(0,a.mdx)("inlineCode",{parentName:"p"},"MyFlipperPluginTest.java"),". In the test method body, is the plugin to be tested as well as a ",(0,a.mdx)("inlineCode",{parentName:"p"},"FlipperConnectionMock"),"."),(0,a.mdx)("p",null,"The following example asserts that the plugin's connected status is what is expected:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},"@RunWith(RobolectricTestRunner.class)\npublic class MyFlipperPluginTest {\n\n  @Test\n  public void myTest() {\n    final MyFlipperPlugin plugin = new MyFlipperPlugin();\n    final FlipperConnectionMock connection = new FlipperConnectionMock();\n\n    plugin.onConnect(connection);\n    assertThat(plugin.connected(), equalTo(true));\n  }\n}\n")),(0,a.mdx)("p",null,"There are two mock classes that are used to construct tests: ",(0,a.mdx)("inlineCode",{parentName:"p"},"FlipperConnectionMock")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"FlipperResponderMock"),". Together these can be used to write very powerful tests to verify the end-to-end functionality of your plugin."),(0,a.mdx)("p",null,"For example, you can test if, for a given incoming message, your plugin responds as expected:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'@Test\npublic void myTest() {\n  final MyFlipperPlugin plugin = new MyFlipperPlugin();\n  final FlipperConnectionMock connection = new FlipperConnectionMock();\n  final FlipperResponderMock responder = new FlipperResponderMock();\n\n  plugin.onConnect(connection);\n\n  final FlipperObject params = new FlipperObject.Builder()\n      .put("phrase", "flipper")\n      .build();\n  connection.receivers.get("myMethod").onReceive(params, responder);\n\n  assertThat(responder.successes, hasItem(\n      new FlipperObject.Builder()\n          .put("phrase", "ranos")\n          .build()));\n}\n'))),(0,a.mdx)(h,{mdxType:"FbAndroidTesting"})),(0,a.mdx)(o.default,{value:"ios",mdxType:"TabItem"},(0,a.mdx)(g,{mdxType:"OssOnly"},(0,a.mdx)("p",null,"Start by creating your first test file ",(0,a.mdx)("inlineCode",{parentName:"p"},"MyFlipperPluginTests.cpp")," and import the testing utilities from ",(0,a.mdx)("inlineCode",{parentName:"p"},"fbsource//xplat/sonar/xplat:FlipperTestLib"),". These utilities mock out core pieces of the communication channel so that you can test your plugin in isolation."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-objc"},"#include <MyFlipperPlugin/MyFlipperPlugin.h>\n#include <FlipperTestLib/FlipperConnectionMock.h>\n#include <FlipperTestLib/FlipperResponderMock.h>\n\n#include <folly/json.h>\n#include <gtest/gtest.h>\n\nnamespace facebook {\nnamespace flipper {\nnamespace test {\n\nTEST(MyFlipperPluginTests, testDummy) {\n  EXPECT_EQ(1 + 1, 2);\n}\n\n} // namespace test\n} // namespace flipper\n} // namespace facebook\n")),(0,a.mdx)("p",null,"Following is a simple test using these mock utilities to create a plugin, send some data, and assert that the result is as expected:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-objc"},'TEST(MyFlipperPluginTests, testDummy) {\n  std::vector<folly::dynamic> successfulResponses;\n  auto responder = std::make_unique<FlipperResponderMock>(&successfulResponses);\n  auto conn = std::make_shared<FlipperConnectionMock>();\n\n  MyFlipperPlugin plugin;\n  plugin.didConnect(conn);\n\n  folly::dynamic message = folly::dynamic::object("param1", "hello");\n  folly::dynamic expectedResponse = folly::dynamic::object("response", "Hi there");\n\n  auto receiver = conn->receivers_["someMethod"];\n  receiver(message, std::move(responder));\n\n  EXPECT_EQ(successfulResponses.size(), 1);\n  EXPECT_EQ(successfulResponses.back(), expectedResponse);\n}\n'))),(0,a.mdx)(v,{mdxType:"FbIosTesting"}))),(0,a.mdx)("h2",{id:"running-flipper-tests"},"Running (Flipper) tests"),(0,a.mdx)("p",null,"This section covers running tests on the ",(0,a.mdx)("a",{parentName:"p",href:"#flipper-desktop"},"Flipper Desktop")," and with the ",(0,a.mdx)("a",{parentName:"p",href:"#flipper-sdk"},"Flipper SDK"),"."),(0,a.mdx)("h3",{id:"flipper-desktop"},"Flipper Desktop"),(0,a.mdx)(g,{mdxType:"OssOnly"},(0,a.mdx)("p",null,"Run ",(0,a.mdx)("inlineCode",{parentName:"p"},"yarn jest")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"yarn jest --watch")," in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"desktop")," directory of your Flipper checkout.")),(0,a.mdx)(x,{mdxType:"FbInternalOnly"},(0,a.mdx)("p",null,"Run ",(0,a.mdx)("inlineCode",{parentName:"p"},"yarn jest")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"yarn jest --watch")," in ",(0,a.mdx)("inlineCode",{parentName:"p"},"~/fbsource/xplat/sonar/desktop"))),(0,a.mdx)("h3",{id:"flipper-sdk"},"Flipper SDK"),(0,a.mdx)("h4",{id:"android-java"},"Android (Java)"),(0,a.mdx)(g,{mdxType:"OssOnly"},(0,a.mdx)("h5",{id:"gradle"},"Gradle"),(0,a.mdx)("p",null,"In the root directory of the checkout:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"./gradlew android:test\n"))),(0,a.mdx)(x,{mdxType:"FbInternalOnly"},(0,a.mdx)("h5",{id:"gradle-1"},"Gradle"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"cd fbsource/xplat/sonar\n./gradlew android:test\n")),(0,a.mdx)("h5",{id:"buck"},"Buck"),(0,a.mdx)("p",null,"Make the required changes then submit a diff. With regarding to testing, ",(0,a.mdx)("inlineCode",{parentName:"p"},"buck test ...")," should work, but doesn't seem to function when run in xplat on a Mac; it does function  on Mobile On Demand if you use @mode/server."),(0,a.mdx)("admonition",{title:"Debugging note",type:"note"},(0,a.mdx)("p",{parentName:"admonition"},"Things do functtion if you copy the files and BUCK file to ",(0,a.mdx)("inlineCode",{parentName:"p"},"fbandroid/javatests")," and change the rule from ",(0,a.mdx)("inlineCode",{parentName:"p"},"sonar_android_test")," to ",(0,a.mdx)("inlineCode",{parentName:"p"},"robolectric3_test"),"."))),(0,a.mdx)(x,{mdxType:"FbInternalOnly"},(0,a.mdx)("h3",{id:"ios"},"iOS"),(0,a.mdx)("p",null,"Focus on the plugins, or Flipper code you want but with the ",(0,a.mdx)("inlineCode",{parentName:"p"},"--with-tests")," param:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-sh"},"arc focus ... --with-tests`\n")),(0,a.mdx)("p",null,"Then, click the '<->' icon in xcode and you run from there.")),(0,a.mdx)("h3",{id:"react-native"},"React Native"),(0,a.mdx)("p",null,"For details, see the ",(0,a.mdx)("a",{parentName:"p",href:"/docs/extending/testing-rn"},"Testing React Native Changes")," page."))}b.isMDXComponent=!0}}]);